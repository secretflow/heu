# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022 Ant Group Co., Ltd
# This file is distributed under the same license as the HEU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: HEU \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-21 20:05+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../development/phe_dev.rst:2
msgid "开发新算法"
msgstr "Develop new algorithms"

#: ../../development/phe_dev.rst:4
msgid "HEU 支持添加自定义 PHE 算法，添加新的 PHE 算法后，上层所有应用都可以无缝切换到新的算法上，用户无需修改任何业务代码。"
msgstr ""
"HEU supports adding custom PHE algorithms. After adding a new PHE "
"algorithm, all upper-layer applications can seamlessly switch to the new "
"algorithm, and users do not need to modify any business code."

#: ../../development/phe_dev.rst:10
msgid ""
"HEU 定义了一套 SPI (Service Provider Interface)，任何符合 SPI 定义的算法都可接入到 HEU 中，HEU "
"的算法分配器（dispatcher）是 O(1) 效率的，也就是算法分配的开销与底层算法种类无关，您可以放心向 HEU 添加多种算法而无需担心对 "
"HEU 造成负担。"
msgstr ""
"HEU defines a set of Service Provider Interface (SPI), any algorithm "
"conforming to the SPI definition can be connected to HEU. The algorithm "
"complexity of HEU dispatcher is O(1), that is, the overhead of algorithm "
"dispatching is independent of the number of underlying algorithms. You "
"can easily add custom algorithms to HEU without worrying about burdening "
"your HEU."

#: ../../development/phe_dev.rst:12
msgid ""
"下文以添加一种 Mock 算法为例，介绍如何在 HEU 中添加、实现一种新的 PHE 算法。新算法的代码文件请存放到 "
"``heu/library/algorithms/`` 路径下。"
msgstr ""
"The following is an example of adding a new \"Mock\" algorithm into HEU "
"to show how to develop and add a new PHE algorithm in HEU. The new "
"algorithm's code files should be placed in ``heu/library/algorithms/``."

#: ../../development/phe_dev.rst:14
msgid "一些前置说明"
msgstr "Some caveats"

#: ../../development/phe_dev.rst:16
msgid ""
"开发一个新算法需要实现 "
"``Plaintext``、``Ciphertext``、``PublicKey``、``SecretKey``、``KeyGenerator``、``Encryptor``、``Decryptor``、``Evaluator``"
" 共 8 个 Class，请勿修改 Class name，所有 Class 都必须放置在 "
"``heu::lib::algorithms::your_algo`` namespace 下，其中 ``your_algo`` "
"使用实际的算法名称替换，否则将编译失败"
msgstr ""
"Developing a new algorithm requires implementing ``Plaintext``, "
"``Ciphertext``, ``PublicKey``, ``SecretKey``, ``KeyGenerator``, "
"``Encryptor``, ``Decryptor`` and `` Evaluator``, a total of 8 classes. "
"Please do not modify the class name, and all classes must be placed under"
" ``heu::lib::algorithms::your_algo`` namespace, where ``your_algo`` "
"should replaced with the actual algorithm name, Otherwise it will fail to"
" compile."

#: ../../development/phe_dev.rst:17
msgid "SPI 只规定了这 8 个 Class 必须要实现的 public 方法，SPI 并没有限制您添加其它方法与字段，您可以根据算法需要自由添加。"
msgstr ""
"SPI only specifies the public methods that must be implemented in these 8"
" classes. SPI does not restrict you from adding other methods and fields."
" You are free to add them according to the needs of your algorithm."

#: ../../development/phe_dev.rst:21
msgid "定义数据结构"
msgstr "Define basic structures"

#: ../../development/phe_dev.rst:23
msgid ""
"一般而言，PHE 的值域空间都比较大，远超 C++ int128 范围，因此您需要选定一个大整数运算库。HEU SPI "
"并没有绑定在任何一个大整数运算库上，您可以任意选定一个合适的大整数库。"
msgstr ""
"Generally speaking, the range space of PHE is relatively large, far "
"beyond the range of C++ int128, so your algorithm needs to rely on a "
"large integer arithmetic library. HEU SPI is not bound to any big integer"
" arithmetic library, you can choose any suitable big integer library."

#: ../../development/phe_dev.rst:25
msgid "选定大数库后，下一步定义 Plaintext 与 Ciphertext 结构。"
msgstr ""
"The next step is to define ``Plaintext`` and ``Ciphertext`` data "
"structure."

#: ../../development/phe_dev.rst:29
msgid "定义 Plaintext"
msgstr "Define Plaintext"

#: ../../development/phe_dev.rst:31
msgid "``Plaintext class`` 的 SPI 接口如下："
msgstr "The SPI of ``Plaintext class`` is shown as follows:"

#: ../../development/phe_dev.rst:33
msgid "heu/library/algorithms/clean_template/plaintext.h"
msgstr ""

#: ../../development/phe_dev.rst:39
msgid ""
"Plaintext class 的接口比较多，这是因为 HEU 并没有绑定到任何大数库，所有明文计算都依赖 Plaintext "
"类接口完成，这些接口您需要一一实现。"
msgstr ""
"The ``Plaintext class`` has many public interfaces. This is because HEU "
"is not bound to any large integer library, and all plaintext calculations"
" rely on the Plaintext SPI. So you need to implement these interfaces one"
" by one."

#: ../../development/phe_dev.rst:41
msgid "关于 SPI 接口中出现的 ``ToBytes`` 方法，此处有一些补充说明："
msgstr "Here are some additional notes about the ``ToBytes`` method in SPI:"

#: ../../development/phe_dev.rst:43
msgid ""
"该接口的功能与 `python int.to_bytes "
"<https://docs.python.org/3/library/stdtypes.html#int.to_bytes>`_ 方法类似。"
msgstr ""
"``ToBytes`` functions similarly to the `python int.to_bytes "
"<https://docs.python.org/3/library/stdtypes.html#int.to_bytes>`_ method."

#: ../../development/phe_dev.rst:44
msgid ""
"该接口与序列化接口的区别：序列化接口用于在不同 HEU 实例之间传递信息，因此序列化的 buffer 只需要 HEU 自己能解析即可，一般与 "
"Bignumber 内存存储格式接近以最大化性能；ToBytes 接口用于在 HEU 与其它模块之间传递信息，因此 Buffer "
"格式必须公认，目前模块之间统一使用 numpy 的格式，numpy 底层调用 Python built-in type int 的 "
"to_bytes() 接口，因此本质上 Plaintext 需要实现一个 python int to_bytes() 类似的接口，把 big "
"number 转换成指定字节大小的大/小端存储，因为存在转换，ToBytes 性能一般比序列化低。另一个区别是 ToBytes "
"是单向的，只需要实现 Plaintext 到 bytes 转换，无需 bytes 到 Plaintext 转换。"
msgstr ""
"About the difference between ``ToBytes()`` and ``Serialize()`` method: "
"The ``Serialize()`` method is used to transfer data between different HEU"
" instances, so the serialized bytes only needs to be parsed by HEU "
"itself, which could be very close to the big number's memory storage "
"layout to maximize performance; However, the ``ToBytes()`` method is used"
" to transfer data between HEU and other devices, so the byte format must "
"be publicly known. At present, devices use the numpy byte format "
"uniformly. And numpy internally calls the to_bytes() method of Python "
"built-in type int, so essentially ``Plaintext`` needs to implement a "
"method similar to python int's to_bytes() to convert a big number into "
"big/little endian storage with a specified byte size. Because of the "
"existence of conversion, the performance of ``ToBytes()`` is generally "
"lower than ``serialize()``. Another difference is that ``ToBytes()`` is "
"unidirectional and only needs to implement plaintext to bytes conversion,"
" no need to implement reverse conversion."

#: ../../development/phe_dev.rst:48
msgid "定义 Ciphertext"
msgstr "Define Ciphertext"

#: ../../development/phe_dev.rst:50
msgid "Ciphertext 需要实现以下这些方法："
msgstr "The SPI of ``Ciphertext class`` is shown as follows:"

#: ../../development/phe_dev.rst:52
msgid "heu/library/algorithms/clean_template/ciphertext.h"
msgstr ""

#: ../../development/phe_dev.rst:60
msgid "定义 KEYS"
msgstr "Define keys"

#: ../../development/phe_dev.rst:62
msgid "下一步定义 Key 相关数据结构，其 SPI 如下："
msgstr ""
"The next step is to define Key related data structures, their SPIs are as"
" follows:"

#: ../../development/phe_dev.rst:64
msgid "``PublicKey class``："
msgstr ""

#: ../../development/phe_dev.rst:66
msgid "heu/library/algorithms/clean_template/public_key.h"
msgstr ""

#: ../../development/phe_dev.rst:72
msgid "``SecretKey class``："
msgstr ""

#: ../../development/phe_dev.rst:74
msgid "heu/library/algorithms/clean_template/secret_key.h"
msgstr ""

#: ../../development/phe_dev.rst:80
msgid "``KeyGenerator class``："
msgstr ""

#: ../../development/phe_dev.rst:82
msgid "heu/library/algorithms/clean_template/key_generator.h"
msgstr ""

#: ../../development/phe_dev.rst:90
msgid "定义操纵单元"
msgstr "Define manipulators"

#: ../../development/phe_dev.rst:92
msgid ""
"基本数据结构和公私钥定义完成后，下一步就可以定义操纵单元，分别是 "
"``Encryptor``、``Decryptor``、``Evaluator``。为了支持不同特性的算法，HEU "
"提供了两套截然不同的接口（SPI），分别是 Scalar SPI 和 Vectorized SPI。"
msgstr ""
"Once the basic data structure and public/private keys are defined, the "
"next step is to define the manipulators, which are ``Encryptor``, "
"``Decryptor`` and ``Evaluator``. In order to support algorithms with "
"different characteristics, HEU provides two distinct sets of SPIs, namely"
" Scalar SPI and Vectorized SPI."

#: ../../development/phe_dev.rst:94
msgid "Scalar SPI：适合于大多数算法，一次调用只处理一个明文或密文。"
msgstr ""
"Scalar SPI: Suitable for most algorithms, processing only one plaintext "
"or ciphertext at a time."

#: ../../development/phe_dev.rst:95
msgid ""
"Vectorized SPI：适合于使用硬件加速的算法，例如 GPU 等，此类硬件对算法并行度有要求，Vectorized SPI 实现了 "
"SIMD 的调用模式，从而使得算法实现层面可以做并行优化。"
msgstr ""
"Vectorized SPI: Suitable for hardware-accelerated algorithms, such as "
"GPU, where parallelism is required. Vectorized SPI implements a SIMD "
"calling pattern, which allows for parallel optimization at algorithm "
"implementation level."

#: ../../development/phe_dev.rst:97
msgid ""
"Scalar SPI 和 Vectorized SPI 算法只需要实现其中一套即可，HEU O(1) dispatcher "
"会根据算法实现的实际情况自动决定调用哪一套 SPI，当然，如果您同时实现 Scalar SPI 和 Vectorized SPI 那将会更好，此时"
" HEU O(1) dispatcher 会根据用户使用场景自动在两套 SPI 中切换，算法将获得最佳性能。"
msgstr ""
"You only need to implement one of the Scalar SPI and Vectorized SPI sets,"
" and the HEU O(1) dispatcher will automatically decide which SPI set to "
"call. Of course, it will be better if you implement both Scalar SPI and "
"Vectorized SPI. At this time, the HEU O(1) dispatcher will switch between"
" the two sets of SPI according to the usage scenario, and your algorithm "
"will obtain best performance."

#: ../../development/phe_dev.rst:99
msgid "HEU O(1) Dispatcher 同时适配两套 SPI 接口的原理"
msgstr "The principle of HEU O(1) dispatcher supporting multiple SPIs"

#: ../../development/phe_dev.rst:102
msgid "为了更好地帮助算法开发者理解 SPI 接口切换的机制，此处介绍一下 HEU O(1) Dispatcher 检测接口是否实现的原理。"
msgstr ""
"In order to better help developers understand the SPI handover mechanism,"
" let's introduce the principle of how the HEU O(1) Dispatcher detects "
"whether the SPI is implemented."

#: ../../development/phe_dev.rst:104
msgid ""
"HEU O(1) Dispatcher 通过 ``std::experimental::is_detected`` "
"工具检测某个类是否实现了某个方法，以下是原理示意："
msgstr ""
"HEU O(1) Dispatcher uses the 'std::experimental::is_detected' struct to "
"check whether a class implements a method. Here's how it works:"

#: ../../development/phe_dev.rst:125
msgid "只实现 Scalar SPI"
msgstr "Scalar SPI only"

#: ../../development/phe_dev.rst:127
msgid "Scalar SPI 需要实现以下接口。"
msgstr ""
"If you only implement Scalar SPI, you need to implement the following "
"methods:"

#: ../../development/phe_dev.rst:129 ../../development/phe_dev.rst:194
msgid "``Encryptor class``："
msgstr ""

#: ../../development/phe_dev.rst:131
msgid "heu/library/algorithms/clean_template/scalar_encryptor.h"
msgstr ""

#: ../../development/phe_dev.rst:137
msgid ""
"Encryptor 涉及一个比较特殊的 ``EncryptWithAudit`` "
"接口，这是因为某些机构对隐语有特殊要求，要求隐语所有的行为具备事后审计能力，即所有的计算过程可还原。对于 PHE "
"加密，此处需要把加密用到的随机数返回给上层以便落入日志。"
msgstr ""
"Encryptor requires the implementation of a special ``EncryptWithAudit`` "
"method, because some institutions have special requirements, requiring "
"all Secretflow behaviors to have post-audit capabilities, that is, all "
"calculation processes can be restored. For PHE encryption, the random "
"number used for encryption needs to be returned to caller for logging."

#: ../../development/phe_dev.rst:139
msgid ""
"``EncryptWithAudit`` 返回的 audit string 中至少要包含明文、密文以及加密所用的随机数三个信息，对于 string"
" 的格式则没有要求，只要是程序可解析的即可，如果能做到 human readable 则更好，您可以通过以下方法查看实际的 audit "
"string 样例："
msgstr ""
"The audit string returned by ``EncryptWithAudit`` must contain at least "
"three pieces of information: the plaintext, the ciphertext, and the "
"random number used for encryption. There is no requirement for the format"
" of the string, as long as it is parsable by program. It is better if the"
" generated string is human-readable. You can see actual audit string "
"samples by:"

#: ../../development/phe_dev.rst:150 ../../development/phe_dev.rst:202
msgid "``Decryptor class``："
msgstr ""

#: ../../development/phe_dev.rst:152
msgid "heu/library/algorithms/clean_template/scalar_decryptor.h"
msgstr ""

#: ../../development/phe_dev.rst:158 ../../development/phe_dev.rst:210
msgid "``Evaluator class``："
msgstr ""

#: ../../development/phe_dev.rst:160
msgid "heu/library/algorithms/clean_template/scalar_evaluator.h"
msgstr ""

#: ../../development/phe_dev.rst:168
msgid "只实现 Vectorized SPI"
msgstr "Vectorized SPI only"

#: ../../development/phe_dev.rst:170
msgid "Vectorized SPI 的功能与 Scalar SPI 一致的，变化的是函数形参的形式，从单个明文/密文传递变成了明文列表/密文列表传递。"
msgstr ""
"The function of Vectorized SPI is the same as that of Scalar SPI. The "
"change is the form of function parameters, from single "
"plaintext/ciphertext object to plaintext/ciphertext object list."

#: ../../development/phe_dev.rst:172
msgid "当算法只实现 Vectorized SPI 的时候，Dispatcher 会将所有计算都转换成 SIMD 形式调用，具体来说："
msgstr ""
"When the algorithm only implements Vectorized SPI, the HEU O(1) "
"dispatcher will convert all operations into SIMD form calls, "
"specifically:"

#: ../../development/phe_dev.rst:174
msgid "如果用户执行的是标量计算，Dispatcher 会将参数转换成长度为 1 的列表调用 Vectorized SPI。"
msgstr ""
"If user is performing a scalar calculation, the HEU O(1) dispatcher will "
"convert the argument to a length 1 list and then call the Vectorized SPI."

#: ../../development/phe_dev.rst:175
msgid "如果用户执行的是矩阵计算，Dispatcher 会将矩阵拆分转换成列表调用 Vectorized SPI。"
msgstr ""
"If user is performing a matrix calculation, the HEU O(1) dispatcher will "
"split and convert the matrix into object pointer lists and then call "
"Vectorized SPI."

#: ../../development/phe_dev.rst:177
msgid ""
"假设用户要做两个矩阵的元素级（element-wise）运算，例如元素加法、元素减法或元素乘法，Dispatcher 会把 broadcast "
"之后的矩阵元素拆解成多个等分，每个等分封装成一个列表，并分配一个线程执行。一个列表内的元素会一次性传递给 Vectorized SPI "
"执行，从而算法可以获得足够大的并发空间。"
msgstr ""
"Suppose the user wants to perform element-wise operations on two "
"matrices, such as element-wise addition, element-wise subtraction, and "
"element-wise multiplication, the HEU O(1) dispatcher will split the "
"broadcast matrices elements into multiple equal parts, encapsulate each "
"part into a list, and assign a thread to execute. The elements in a list "
"are passed to the Vectorized SPI for execution at once, so that your "
"algorithm can obtain a large enough concurrency space."

#: ../../development/phe_dev.rst:183
msgid "如果是 Matmul 运算，则 Dispatcher 会把矩阵按行列转换成多个列表，并行调用 Vectorized SPI 完成计算。"
msgstr ""
"In the case of matmul, the HEU O(1) dispatcher converts the matrices into"
" multiple lists by row or by column, and calls Vectorized SPI in "
"parallel."

#: ../../development/phe_dev.rst:189
msgid "Vectorized SPI 传递列表用的是 Span<T> 和 ConstSpan<T> 两种类型，其中："
msgstr ""
"Vectorized SPI uses two types of ``Span<T>`` and ``ConstSpan<T>`` to pass"
" parameters, among which:"

#: ../../development/phe_dev.rst:191
msgid "Span<T> 表示一个只读数组，每个元素是指向 T 的指针"
msgstr "``Span<T>`` represents a read-only array, each element is a pointer of T."

#: ../../development/phe_dev.rst:192
msgid "ConstSpan<T> 表示一个只读数组，每个元素是指向 T 的常量指针"
msgstr ""
"``ConstSpan<T>`` represents a read-only array, each element is a constant"
" pointer of T."

#: ../../development/phe_dev.rst:196
msgid "heu/library/algorithms/clean_template/vector_encryptor.h"
msgstr ""

#: ../../development/phe_dev.rst:204
msgid "heu/library/algorithms/clean_template/vector_decryptor.h"
msgstr ""

#: ../../development/phe_dev.rst:212
msgid "heu/library/algorithms/clean_template/vector_evaluator.h"
msgstr ""

#: ../../development/phe_dev.rst:220
msgid "混合实现 Scalar/Vectorized SPI"
msgstr "Hybrid Scalar/Vectorized SPI"

#: ../../development/phe_dev.rst:222
msgid ""
"HEU Dispatcher 会在函数级别探测算法实现了哪些 SPI，因此在同一个 class 中混合实现（或者同时实现）两种 API "
"也是可以的，例如 Encryptor class 中的 EncryptZero 您可以只实现 Scalar SPI，而 Encrypt "
"方法同时实现两种 SPI，此时 Dispatcher 会在函数粒度上选择最合适的 SPI 调用。"
msgstr ""
"The HEU O(1) dispatcher probes which SPIs are implemented by algorithm at"
" function level, so it's fine to mix (or combine) both SPIs in a same "
"class. For example, the ``EncryptZero()`` method in ``Encryptor`` class "
"is only implemented as Scalar SPI. And ``Encrypt()`` method implemented "
"under both SPIs. In this case the HEU O(1) dispatcher will choose the "
"most appropriate SPI at function granularity."

#: ../../development/phe_dev.rst:224
msgid "heu/library/algorithms/clean_template/mix_spi_demo.h"
msgstr ""

#: ../../development/phe_dev.rst:232
msgid "注册新算法"
msgstr "Register your algorithm"

#: ../../development/phe_dev.rst:234
msgid "算法主体开发完成后，还需要在 HEU 中注册新算法，注册的位置位于以下两个文件："
msgstr ""
"When the main body of algorithm is developed, the new algorithm needs to "
"be registered in HEU. The registration location is located in following "
"two files:"

#: ../../development/phe_dev.rst:236
msgid ""
"`heu/library/phe/base/schema.h "
"<https://github.com/secretflow/heu/blob/main/heu/library/phe/base/schema.h>`_"
msgstr ""

#: ../../development/phe_dev.rst:237
msgid ""
"`heu/library/phe/base/schema.cc "
"<https://github.com/secretflow/heu/blob/main/heu/library/phe/base/schema.cc>`_"
msgstr ""

#: ../../development/phe_dev.rst:239
msgid ""
"请依照文件中注释的引导注册您的算法，有 ``[SPI: Please register your algorithm here]`` "
"标记的位置就是需要修改的地方，总共有5处，其中 ``schema.h`` 有4处需要修改，``schema.cc`` 有1处需要修改。"
msgstr ""
"Please follow the instructions in files to register your algorithm. The "
"position marked with ``[SPI: Please register your algorithm here]`` is "
"the place that needs to be updated. There are 5 places in total, four"
" in ``schema.h``, and one in ``schema.cc``."

#: ../../development/phe_dev.rst:241
msgid "代码文件修改完之后，还需要在 ``schema`` 对应的 ``BUILD.bazel`` 中添加您的算法。"
msgstr "After modifying the code file, you also need to add your algorithm in ``BUILD.bazel`` corresponding to ``schema`` file."

#: ../../development/phe_dev.rst:243
msgid "算法注册后，也请同步更新 CHANGELOGS 文件："
msgstr "After the algorithm is registered, please also update the CHANGELOGS file as well:"

#: ../../development/phe_dev.rst:245
msgid ""
"`heu/CHANGELOGS.md "
"<https://github.com/secretflow/heu/blob/main/CHANGELOGS.md>`_"
msgstr ""

#: ../../development/phe_dev.rst:249
msgid "测试和使用"
msgstr "Test and use"

#: ../../development/phe_dev.rst:251
msgid ""
"算法开发完毕后，您还需要编写一个编译脚本，HEU 使用的是 bazel 编译系统，您需要在算法同级目录 "
"``heu/library/algorithms/your_algo/`` 下放置一个 ``BUILD.bazel`` 文件。"
msgstr ""
"After the algorithm is developed, you also need to write a build script. "
"HEU uses the bazel compilation system. You need to write a "
"``BUILD.bazel`` file in the same level directory of the algorithm, namely"
" ``heu/library/algorithms/your_algo/``."

#: ../../development/phe_dev.rst:253
msgid ""
"``BUILD.bazel`` 文件的写法可以参考 `此处 "
"<https://github.com/secretflow/heu/blob/main/heu/library/algorithms/mock/BUILD.bazel>`_"
msgstr ""
"The syntax of ``BUILD.bazel`` can refer to `here "
"<https://github.com/secretflow/heu/blob/main/heu/library/algorithms/mock/BUILD.bazel>`_"

#: ../../development/phe_dev.rst:254
msgid "更多 Bazel 教程可以参考 `Bazel 官方文档 <bazel.build>`_"
msgstr ""
"For more Bazel tutorials, please refer to `Bazel official documentation "
"<bazel.build>`_"

#: ../../development/phe_dev.rst:258
msgid "单元测试"
msgstr "Unit test"

#: ../../development/phe_dev.rst:261
msgid "编写自己的单测（可选）"
msgstr "Develop your own unit tests (optional)"

#: ../../development/phe_dev.rst:263
msgid ""
"HEU 单元测试使用 `GoogleTest <github.com/google/googletest>`_ 框架，有关 GoogleTest "
"的用法请查阅 `GoogleTest 官方文档 <google.github.io/googletest/>`_"
msgstr ""
"HEU unit tests are based on the `GoogleTest "
"<github.com/google/googletest>`_ framework. For the usage of GoogleTest, "
"please refer to `GoogleTest official documentation "
"<google.github.io/googletest/>`_."

#: ../../development/phe_dev.rst:265
msgid "单元测试编写完毕后，您可以使用以下命令运行单元测试："
msgstr "Once the unit tests are developed, you can run the unit tests with:"

#: ../../development/phe_dev.rst:273
msgid "运行已有单测（必须）"
msgstr "Run existing unit tests (required)"

#: ../../development/phe_dev.rst:275
msgid "即使您没有编写任何单测，HEU 也会自动测试您的算法，单测请在 Python 3.8 环境下执行，请执行以下命令测试整个 HEU："
msgstr ""
"HEU will automatically test your algorithm even if you haven't written "
"any unit tests. Please set up a Python 3.8 environment and execute the "
"following command to test entire HEU:"

#: ../../development/phe_dev.rst:283
msgid "性能测试"
msgstr "Benchmark"

#: ../../development/phe_dev.rst:285
msgid "以下命令可以对您的算法做性能测试："
msgstr "You can benchmark your algorithm with the following command:"

#: ../../development/phe_dev.rst:297
msgid "如果不加 ``--schema`` 参数，则默认运行所有算法的性能测试，以便您与其它算法对比性能："
msgstr ""
"If the ``--schema`` parameter is not added, all algorithms will be "
"benchmarked by default, so that you can compare performance with other "
"algorithms:"

#: ../../development/phe_dev.rst:307
msgid "算法应用"
msgstr "Application"

#: ../../development/phe_dev.rst:309
msgid "单元测试通过后，请执行以下命令编译、安装 Pip 包，以便在 Python 环境中使用您的新算法："
msgstr ""
"After the unit tests are passed, execute the following commands to "
"compile and install the HEU pip package so that your new algorithm can be"
" used:"

#: ../../development/phe_dev.rst:318
msgid "基本使用："
msgstr "Basic usage:"

#: ../../development/phe_dev.rst:330
msgid "祝贺"
msgstr "Congratulation"

#: ../../development/phe_dev.rst:332
msgid ""
"如果一切顺利的话，此时您的算法已经可以在隐语中使用了，并且隐语上层所有基于 PHE 的应用都可以无缝切换到您的算法上，例如 WOE、HESS-"
"LR、SecureBoost 等等，相信这些上层应用一定可以从您的算法中获益，感谢您对隐语做出的贡献。"
msgstr "Goog work! Your algorithm can be used in Secretflow now. And all PHE-based applications of Secretflow can seamlessly switch to your algorithm, such as WOE, HESS-LR, SecureBoost and so on. We believe these applications can definitely benefit from your algorithm, thank you for your contribution."
