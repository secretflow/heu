# SOME DESCRIPTIVE TITLE.
# Copyright (C) Copyright 2022 Ant Group Co., Ltd.
# This file is distributed under the same license as the HEU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: HEU \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-02 20:22+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../getting_started/quick_start.rst:2
msgid "快速入门"
msgstr "Quick start"

#: ../../getting_started/quick_start.rst:4
msgid ""
"HEU 当前仅可作为加法同态加密 Library 使用，使用前请先参考 :doc:`安装说明 <./installation>` 安装 HEU "
"Python 包。"
msgstr ""
"HEU can only be used as an Additive Homomorphic Encryption (AHE) Library "
"now. Please refer to :doc:`Installation Instructions <./installation>` to"
" install HEU before using it"

#: ../../getting_started/quick_start.rst:6
msgid "本文所讲的内容全部位于 heu.phe 模块中"
msgstr "All content mentioned in this article is implemented in ``heu.phe`` module"

#: ../../getting_started/quick_start.rst:9
msgid "加解密"
msgstr "Encryption & Decryption"

#: ../../getting_started/quick_start.rst:11
msgid "HEU 的操作对象有3种："
msgstr "There are 3 types of objects in HEU:"

#: ../../getting_started/quick_start.rst:13
msgid "HEU 操作对象"
msgstr "Object types in HEU"

#: ../../getting_started/quick_start.rst:1
msgid "对象"
msgstr "Objects"

#: ../../getting_started/quick_start.rst:1
msgid "数据类型"
msgstr "Data type"

#: ../../getting_started/quick_start.rst:1
msgid "描述"
msgstr "Description"

#: ../../getting_started/quick_start.rst:1
msgid "Cleartext（原文）"
msgstr "Cleartext"

#: ../../getting_started/quick_start.rst:1
msgid "python 原生数据类型"
msgstr "Native data types in python"

#: ../../getting_started/quick_start.rst:1
msgid "Python 原生的整数、浮点数"
msgstr "python native data types, such as int, float"

#: ../../getting_started/quick_start.rst:1
msgid "Plaintext（明文）"
msgstr "Plaintext"

#: ../../getting_started/quick_start.rst:1
msgid "phe.Plaintext"
msgstr ""

#: ../../getting_started/quick_start.rst:1
msgid "编码后的原文，一定为整数"
msgstr "The encoded cleartext, always an integer"

#: ../../getting_started/quick_start.rst:1
msgid "Ciphertext（密文）"
msgstr "Ciphertext"

#: ../../getting_started/quick_start.rst:1
msgid "phe.Ciphertext"
msgstr ""

#: ../../getting_started/quick_start.rst:1
msgid "密文"
msgstr "Ciphertext"

#: ../../getting_started/quick_start.rst:20
msgid "三种对象之间的转换方法如下："
msgstr "The conversion methods between three objects are as follows:"

#: ../../getting_started/quick_start.rst:-1
msgid "HEU 对象转换关系图示"
msgstr "HEU object conversion relationship diagram"

#: ../../getting_started/quick_start.rst:27
msgid "HEU 基本使用展示"
msgstr "Basic usage of HEU"

#: ../../getting_started/quick_start.rst:45
msgid ""
"``encrypt_raw`` 和 ``decrypt_raw`` "
"支持高精度，其精度与同态加密算法本身支持的值域范围相同，具体值域因算法而异，但一般都 **远大于** C++ int128 表达范围。"
msgstr ""
"The ``encrypt_raw`` and ``decrypt_raw`` interfaces support arbitrary "
"precision, and the conversion precision is the same as the range of value"
" supported by HE algorithm itself. The exact range varies from algorithm "
"to algorithm, but is generally much larger than C++ int128_t's range."

#: ../../getting_started/quick_start.rst:49
msgid "编码"
msgstr "Encoding"

#: ../../getting_started/quick_start.rst:51
msgid "当前 HEU 提供了五种 ``Encoder``："
msgstr "Currently HEU provides five kinds of ``Encoders``:"

#: ../../getting_started/quick_start.rst:53
msgid "``phe.IntegerEncoder``: 编码 128bits 以内的整数"
msgstr "``phe.IntegerEncoder``: Encode int128 integers"

#: ../../getting_started/quick_start.rst:54
msgid "``phe.FloatEncoder``: 编码双精度浮点数"
msgstr "``phe.FloatEncoder``: Encode floating-point (double) numbers"

#: ../../getting_started/quick_start.rst:55
msgid "``phe.BigintEncoder``: 编码高精度整数，支持任意精度"
msgstr "``phe.BigintEncoder`` Encode arbitrary-precision integers"

#: ../../getting_started/quick_start.rst:56
msgid "``phe.BatchIntegerEncoder``: 将两个整数原文编码到一个明文中"
msgstr ""
"``phe.BatchIntegerEncoder``: Encode two int64 integer cleartexts into one "
"plaintext"

#: ../../getting_started/quick_start.rst:57
msgid "``phe.BatchFloatEncoder``: 将两个浮点数原文编码到一个明文中"
msgstr ""
"``phe.BatchFloatEncoder``: Encode two float64 cleartexts into one plaintext"

#: ../../getting_started/quick_start.rst:59
msgid "创建 Encoder 的方法（以``phe.IntegerEncoder``为例）"
msgstr "Methods to create Encoders (take ``phe.IntegerEncoder`` as an example)"

#: ../../getting_started/quick_start.rst:61
msgid "方法一："
msgstr "Method 1:"

#: ../../getting_started/quick_start.rst:67
msgid "方法二："
msgstr "Method 2:"

#: ../../getting_started/quick_start.rst:74
msgid "方法三："
msgstr "Method 3:"

#: ../../getting_started/quick_start.rst:83
msgid "IntegerEncoder 和 FloatEncoder"
msgstr "IntegerEncoder & FloatEncoder"

#: ../../getting_started/quick_start.rst:85
msgid ""
"``phe.IntegerEncoder`` 和 ``FloatEncoder`` 原理类似，都是将原文乘上一个 scale 后转换成明文，因此 "
"scale 大小决定了计算的精度。如果创建 ``IntegerEncoder/FloatEncoder`` 对象时不提供参数，则使用默认的 "
"scale ``1e6``"
msgstr ""
"``phe.IntegerEncoder`` and ``FloatEncoder`` are similar in principle, "
"both multiply cleartextby a scale to convert it into plaintext, so the "
"size of the scale determines the precision of calculation. If the "
"IntegerEncoder/FloatEncoder object is created without arguments, the "
"default scale ``1e6`` is used."

#: ../../getting_started/quick_start.rst:87
msgid "``phe.IntegerEncoder`` 有数值大小上限，请确保编码后的明文小于 128 比特"
msgstr ""
"``phe.IntegerEncoder`` has an upper limit, please make sure the scaled "
"cleartextis less than 128 bits"

#: ../../getting_started/quick_start.rst:89
msgid "``phe.FloatEncoder`` 有数值大小上限，请确保编码后的明文大小在双精度浮点数（double）表示范围内"
msgstr ""
"``phe.FloatEncoder`` has an upper limit, please make sure the scaled "
"cleartext is in the representation range of (double) floating-point "
"numbers"

#: ../../getting_started/quick_start.rst:108
msgid "BigintEncoder"
msgstr ""

#: ../../getting_started/quick_start.rst:110
msgid ""
"``BigintEncoder`` 类似于 "
"``IntegerEncoder(scale=1)``，但不受精度限制，支持编码任意精度的整数，为了方便用户使用，BigintEncoder "
"是隐式的，如果用户没有指定 encoder，都默认使用该 encoder。"
msgstr ""
"``BigintEncoder`` is similar to ``IntegerEncoder(scale=1)``, but supports"
" encoding arbitrary precision integers. The BigintEncoder is used by "
"default when user does not specify an encoder."

#: ../../getting_started/quick_start.rst:112
msgid "``BigintEncoder`` 编码 int128 原文性能非常高，但是超过 128bits 后性能会有显著降低"
msgstr ""
"``BigintEncoder`` has very high performance for cleartexts less than "
"int128, but the performance will be significantly reduced for cleartexts "
"above 128 bits"

#: ../../getting_started/quick_start.rst:126
msgid "BatchIntegerEncoder 和 BatchFloatEncoder"
msgstr "BatchIntegerEncoder & BatchFloatEncoder"

#: ../../getting_started/quick_start.rst:128
msgid ""
"BatchIntegerEncoder 和 BatchFloatEncoder 是上述 IntegerEncoder、FloatEncoder 的"
" batch 版本，功能类似，但是 BatchEncoder "
"支持将两个原文（Cleartext，int64整数）打包加密到一个明文（Plaintext）中，实现 SIMD 功能。"
msgstr ""

#: ../../getting_started/quick_start.rst:134
msgid "``phe.BatchIntegerEncoder`` 有数值大小上限，每个原文不大于 64 比特"
msgstr ""
"``phe.BatchIntegerEncoder`` has an upper limit on cleartext size, please make "
"sure each cleartext is less than 64 bits"

#: ../../getting_started/quick_start.rst:136
msgid ""
"BatchIntegerEncoder、BatchFloatEncoder "
"并不完全兼容密态减法，仅当密文中所有元素都是正整数时才可以使用，如果您无法确定元素数值范围，应当避免使用密态减法。"
msgstr ""
"BatchIntegerEncoder and BatchFloatEncoder are not fully compatible with cryptographic subtraction. They "
"can only be used when all elements in ciphertext are positive integers. "
"If you cannot infer the value range of elements, cryptographic "
"subtraction should be avoided."

#: ../../getting_started/quick_start.rst:162
msgid "BatchEncoder 当前一次仅支持打包2个原文，如果您有打包更多数字的需求，欢迎提 Issue 或者直接参与共建。"
msgstr ""

#: ../../getting_started/quick_start.rst:166
msgid "持久化"
msgstr "Persistence"

#: ../../getting_started/quick_start.rst:168
msgid "实际场景中，隐私计算往往涉及多个参与方，这就涉及到对象的序列化和反序列化，HEU 的对象持久化功能依赖 Pickle。"
msgstr ""
"In practical scenarios, privacy preserving computing often involves "
"multiple parties, which requires objects to have serialization and "
"deserialization capabilities. The object persistence capability in HEU "
"relies on Pickle."

#: ../../getting_started/quick_start.rst:170
msgid ""
"在一个典型的使用场景中，Client 是数据提供方，Server 是算力提供方，Client 并不信任 Server，因此 Client "
"可以把数据加密发送给 Server，Server 在密文数据上做计算，并把结果返回给 Client。"
msgstr ""
"In a typical usage scenario, the client is data provider and the server "
"is computing power provider. Assuming that the client does not trust the "
"server, so the client chooses to encrypt private data first and then send"
" it to server. The server perform calculations on ciphertext and returns "
"the result to the client."
