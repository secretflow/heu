# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022 Ant Group Co., Ltd
# This file is distributed under the same license as the HEU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: HEU \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-02 20:22+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../getting_started/numpy.rst:2
msgid "矩阵运算"
msgstr "Matrix Operations"

#: ../../getting_started/numpy.rst:4
msgid "HEU 提供了矩阵化运算接口，其功能主要位于 ``heu.numpy`` 模块。"
msgstr ""
"HEU provides a set of matrix operation interfaces, whose functions are "
"mainly located in the ``heu.numpy`` module."

#: ../../getting_started/numpy.rst:6
msgid "``heu.numpy`` 大部分接口都使用并行计算的方式实现，其性能比纯 Python 实现的矩阵运算库高得多"
msgstr ""
"Most of the functions of ``heu.numpy`` are implemented in parallel way, "
"and their performances are usually much higher than matrix library "
"implemented by pure Python."

#: ../../getting_started/numpy.rst:10
msgid "初始化"
msgstr "Initialization"

#: ../../getting_started/numpy.rst:13
msgid "运行本文示例代码之前请先通过以下方式 import 相关模块"
msgstr ""
"Please import relevant modules before running any sample codes in this "
"document"

#: ../../getting_started/numpy.rst:21
msgid "``heu.numpy`` 环境初始化的方法与 ``heu.phe`` 类似："
msgstr ""
"The method of initializing ``heu.numpy``'s environment is similar to that"
" of ``heu.phe``:"

#: ../../getting_started/numpy.rst:31
msgid ""
"另外，由于 ``heu.numpy`` 模块仅仅是 ``heu.phe`` 模块的装饰器，如果您已经有 phe kit 对象，则可以通过 phe "
"kit 对象快速构造 hnp kit 对象，此时同态加密的密钥不会重新生成："
msgstr ""
"In addition, since the ``heu.numpy`` module is just a decorator of the "
"``heu.phe`` module, if you already have a phe kit object, you can quickly"
" construct a hnp kit object from the phe kit object. Please note that the"
" homomorphic encryption key pair will not be regenerated in this way:"

#: ../../getting_started/numpy.rst:40
msgid ""
"在典型的使用场景下，HEU 的使用方由 **sk_keeper** 和 **evaluator** 组成，**sk_keeper** 生成 key"
" pair 后会把公钥传给 **evaluator**，以便 **evaluator** 执行后续运算。"
msgstr ""
"In a typical usage scenario, the participants of HEU consist of "
"**sk_keeper** and **evaluator**. After **sk_keeper** generates the key "
"pair, it will pass the public key to **evaluator** so that the **evaluator** can "
"perform subsequent operations."

#: ../../getting_started/numpy.rst:42
msgid "以下是一段多方场景下的环境初始化示例："
msgstr ""
"Below is an example of environment initialization in a multi-party "
"scenario:"

#: ../../getting_started/numpy.rst:61
msgid "I/O"
msgstr ""

#: ../../getting_started/numpy.rst:63
msgid ""
"环境准备好之后，下面介绍 heu.numpy 如何处理 Python 中的数据。矩阵在 Python 中有多种表示方式，例如嵌套的 "
"List，嵌套的 Tuple 以及 numpy.ndarray，HEU 把所有 Python 中原始的数据类型称为 "
"Cleartext（原文）。参考 :doc:`快速入门 <./quick_start>`，而 HEU 内部仅有 "
"hnp.PlaintextArray 和 hnp.CiphertextArray 两种类型，分别存储明文矩阵和密文矩阵，Python "
"中的原始数据类型需要先转换为 hnp.PlaintextArray 后才能被 hnp.numpy 模块进一步处理。"
msgstr ""
"Now that the environment is ready, here's how ``heu.numpy`` module "
"handles Python data. Matrices have various representations in Python, "
"such as nested lists, nested tuples, and numpy.ndarray. HEU calls all "
"these primitive data 'Cleartext', see :doc:`Quick Start<./quick_start>` "
"for details. However, there are only two types of **hnp.PlaintextArray** "
"and **hnp.CiphertextArray** in HEU, which store plaintext matrix and "
"ciphertext matrix respectively. That is to say, the original Python data "
"need to be converted to hnp.PlaintextArray before it can be processed by "
"``hnp.numpy`` module."

#: ../../getting_started/numpy.rst:65
msgid "本节介绍如何使用 ``heu.numpy`` 模块将数据在原文（cleartext）与明文（plaintext）之间做转换。"
msgstr ""
"This section describes how to use the ``heu.numpy`` module to convert "
"data between cleartext and plaintext."

#: ../../getting_started/numpy.rst:69
msgid "输入"
msgstr "Infeed"

#: ../../getting_started/numpy.rst:71
msgid ""
"与 ``heu.phe`` 一样，原文（cleartext）到明文（plaintext）之间的转换依赖编码器，``heu.numpy`` 与 "
"``heu.phe`` 共用相同的编码器。同时，``heu.numpy`` 模块提供了 ``.array()`` 接口用于识别并转换 "
"Cleartext 矩阵。"
msgstr ""
"Like the ``heu.phe`` module, the conversion from cleartext to plaintext "
"depends on encoder, please note that ``heu.numpy`` shares the same "
"encoders as ``heu.phe`` . And the ``heu.numpy`` module provides a "
"``.array()`` interface for identifying and transforming cleartext "
"matrices."

#: ../../getting_started/numpy.rst:96
msgid ""
"**phe.IntegerEncoder**、**phe.FloatEncoder**、**phe.BatchIntegerEncoder** 和"
" **phe.BatchFloatEncoder** 默认并行编码原文矩阵，而 **phe.BigintEncoder** "
"受限于全局解释器锁（GIL）的存在尚不支持并行编码。"
msgstr ""
"The **phe.IntegerEncoder**, **phe.FloatEncoder**, **phe.BatchIntegerEncoder** and **phe.BatchFloatEncoder**"
" encode cleartext matrix in parallel by default, however, the "
"**phe.BigintEncoder** is limited by CPython GIL (global interpreter lock)"
" and does not support parallel encoding yet."

#: ../../getting_started/numpy.rst:98
msgid ""
"**phe.IntegerEncoder**、**phe.FloatEncoder** 本质上就是把原始数据乘了一个 "
"scale，如果我自己把原文乘上一个 scale 再转换成 hnp.PlaintextArray 行吗？"
msgstr ""
"The **phe.IntegerEncoder** and **phe.FloatEncoder** are essentially "
"multiplying cleartext by a scale. So can I multiply the cleartext a scale by myself and"
" ignore the encoder?"

#: ../../getting_started/numpy.rst:100
msgid ""
"答案是可以，但性能会低一些。HEU 会尽可能地做并行化，而自己在 Python 端做 scale "
"的话一定是串行的。另外，受限于形式，**hnp.array()** 必须要指定一个 encoder，如果原文本来就是整数或者您已经做了 "
"scale，您可以向 **hnp.array()** 传入一个 scale=1 的 encoder，或者直接使用默认的 "
"``BigintEncoder``"
msgstr ""
"The answer is yes, but the performance will be lower. HEU will do "
"parallel encoding as much as possible, but if you do scale yourself on "
"the Python side, it will always be serial. In addition, limited by the "
"method signature, the **hnp.array()** interface always need an encoder, "
"so if the cleartext is already integers or you have already done a scale,"
" you can pass a scale=1 encoder to it, or just use the default "
"``phe.BigintEncoder`` encoder directly"

#: ../../getting_started/numpy.rst:116
msgid "辅助函数"
msgstr "Helper functions"

#: ../../getting_started/numpy.rst:118
msgid "HEU 提供了一些辅助函数用以快速创建 hnp.PlaintextArray 对象。"
msgstr ""
"HEU provides some helper functions to help you create "
"**hnp.PlaintextArray** quickly."

#: ../../getting_started/numpy.rst:132
msgid "输出"
msgstr "Outfeed"

#: ../../getting_started/numpy.rst:134
msgid "**hnp.PlaintextArray** 提供了 **to_numpy()** 接口用于将明文转换成原文，同理，转换的过程依赖编码器。"
msgstr ""
"The **hnp.PlaintextArray** interface provides a **to_numpy()** interface "
"for converting plaintext to cleartext. Similarly, the conversion process "
"depends on an encoder."

#: ../../getting_started/numpy.rst:136
msgid ""
"编码器同时拥有编码和解码功能，一般来说， **to_numpy()** 需要传入与 **hnp.array()** "
"相同的编码器对象，否则可能导致解码后的原文不正确"
msgstr ""
"The encoder has both encoding and decoding functions. Generally speaking,"
" **to_numpy()** needs to pass in the same encoder as **hnp.array()**, "
"otherwise the decoded cleartext may be incorrect"

#: ../../getting_started/numpy.rst:147
msgid "与 **hnp.array()** 一样，如果 **to_numpy()** 不指定编码器，则默认使用 ``BigintEncoder``。"
msgstr ""
"Like **hnp.array()**, if **to_numpy()** does not feed an encoder, the "
"``BigintEncoder`` is used by default."

#: ../../getting_started/numpy.rst:151
msgid "加解密和运算"
msgstr "Encryption Decryption and Evaluation"

#: ../../getting_started/numpy.rst:154
msgid "基本操作"
msgstr "Basic operations"

#: ../../getting_started/numpy.rst:156
msgid ""
"**encryptor** 和 **decryptor** 分别提供了加密和解密接口，**evaluator** "
"提供了明文、密文运算的能力，用法如下："
msgstr ""
"The **encryptor** and **decryptor** provide encryption and decryption "
"interface respectively. The **evaluator** provides the capability of "
"plaintext and ciphertext operations, the usage is as follows:"

#: ../../getting_started/numpy.rst:172
msgid ""
"同态加密的密文无法做 truncation，因此如果 plaintext/ciphertext 是经过 scale 的，则乘法会导致 scale "
"变成两倍，这时可以用以下两种方式解决："
msgstr ""
"The ciphertext of homomorphic encryption cannot be truncated, so if the "
"plaintext/ciphertext is scaled, the multiplication will cause the scale "
"to be doubled. The following are two suggestions to solve this problem:"

#: ../../getting_started/numpy.rst:174
msgid "保证乘法的其中一个乘数的 scale 为 1"
msgstr "Guarantee one of the multipliers have a scale of 1"

#: ../../getting_started/numpy.rst:182
msgid "在结果转为明文或原文后手动除以 scale"
msgstr ""
"Manually divide a scale after the result is converted to "
"plaintext or cleartext"

#: ../../getting_started/numpy.rst:195
msgid "切片"
msgstr "Slice"

#: ../../getting_started/numpy.rst:197
msgid "**hnp.PlaintextArray** 和 **hnp.CiphertextArray** 支持切片，示例如下："
msgstr ""
"The **hnp.PlaintextArray** and **hnp.CiphertextArray** support slicing, "
"examples are as follows:"

#: ../../getting_started/numpy.rst:228
msgid ""
"hnp 的切片 key 支持 scalar，sequence，slice 类型，其中 sequence 是 list，tuple "
"等类型的统称。如果 key 是 scalar，则切片在该维度上降维，如果 key 是 sequence 和 slice，则切片保留维度，举例来说："
msgstr ""
"The slice key of ``hnp array`` supports scalar, sequence and slice types,"
" where sequence is the collective name of list, tuple and other types. If"
" the key is a scalar, the slice is dimensionally reduced on that "
"dimension, and if the key is a sequence or a slice, the slice retains the"
" dimension, for example:"

#: ../../getting_started/numpy.rst:230
msgid "harr[sequence/slice, sequence/slice]: 结果为 matrix"
msgstr "harr[sequence/slice, sequence/slice]: Slice is a matrix"

#: ../../getting_started/numpy.rst:231
msgid "harr[sequence/slice, scalar] or harr[scalar, sequence/slice]: 结果为 vector"
msgstr ""
"harr[sequence/slice, scalar] or harr[scalar, sequence/slice]: Slice is a "
"vector"

#: ../../getting_started/numpy.rst:232
msgid "harr[scalar, scalar]: 结果为 scalar"
msgstr "harr[scalar, scalar]: Slice is a scalar"

#: ../../getting_started/numpy.rst:235
msgid "hnp 切片的用法与 numpy 类似，但并不完全一样，以下是结果不一致的地方"
msgstr ""
"The usage of hnp array slicing is similar to numpy, but not exactly the "
"same, the following are examples of inconsistent results:"

