# SOME DESCRIPTIVE TITLE.
# Copyright (C) Copyright 2022 Ant Group Co., Ltd.
# This file is distributed under the same license as the HEU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: HEU \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-25 10:58+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../getting_started/faq.rst:2
msgid "常见问题"
msgstr "Frequently asked questions (FAQ)"

#: ../../getting_started/faq.rst:6
msgid "安装部署相关"
msgstr "Category: Install and deployment"

#: ../../getting_started/faq.rst:10
msgid "HEU 支持 Mac 吗？"
msgstr "Does HEU support installation on Mac ?"

#: ../../getting_started/faq.rst:11
msgid "支持，HEU 同时支持基于 Intel 和 Apple Silicon CPU 的 macOS。"
msgstr "Yes, HEU supports both Intel and Apple Silicon CPU based macOS."

#: ../../getting_started/faq.rst:15
msgid "Pip 找不到安装包"
msgstr "Pip cannot find a suitable installation package"

#: ../../getting_started/faq.rst:16
msgid "请依次检查安装环境是否满足要求："
msgstr "Please check whether the installation environment meets the requirements:"

#: ../../getting_started/faq.rst:18
msgid ""
"检查 `Pypi <https://pypi.org/project/sf-heu>`__ 上面是否存在与您的 Python 环境匹配的 sf-"
"heu 包"
msgstr ""
"Check whether there is an sf-heu package on `Pypi "
"<https://pypi.org/project/sf-heu>`__ that matches your Python "
"environment."

#: ../../getting_started/faq.rst:19
msgid "Pip 版本 22.0+"
msgstr "Pip version must be 22.0+"

#: ../../getting_started/faq.rst:20
msgid "操作系统版本是否满足要求，详见 :doc:`安装文档<./installation>`"
msgstr ""
"Check whether the OS version meets the requirements, see "
":doc:`installation documentation<./installation>` for details."

#: ../../getting_started/faq.rst:24
msgid "HEU 是否支持其它的 Python 版本？"
msgstr "Docs HEU support other versions of Python"

#: ../../getting_started/faq.rst:25
msgid ""
"支持。对于 dev 版本，您也可以自助 :doc:`从源码编译<./installation>` 所需的 Python 版本的二进制包"
msgstr ""
"Supported. For the "
"dev version, you can also self-help by :doc:`compiling from "
"source<./installation>` the binary package for the required Python "
"version."

#: ../../getting_started/faq.rst:30
msgid "功能咨询"
msgstr "Function Consultation"

#: ../../getting_started/faq.rst:33
msgid "HEU 支持哪些半同态算法？"
msgstr "Which homomorphic encryption algorithms does HEU support?"

#: ../../getting_started/faq.rst:34
msgid ""
"Paillier、Okamoto–Uchiyama、EC ElGamal、Damgard-"
"Jurik、DGK，其中部分算法还实现了硬件加速的版本，详见 :doc:`算法选择<./algo_choice>`。"
msgstr ""
"Paillier, Okamoto–Uchiyama, EC ElGamal, Damgard-Jurik, and DGK, among "
"which some algorithms have hardware-accelerated versions, for more "
"details see :doc:`algorithm selection<./algo_choice>`."

#: ../../getting_started/faq.rst:38
msgid "HEU 当前提供哪些功能，FHE 支持吗？"
msgstr "What features does HEU currently provide, and does it support FHE?"

#: ../../getting_started/faq.rst:39
msgid ""
"HEU 是一个业界领先的 PHE Library，支持加解密、明密文加减法、密文-明文乘法等计算，并提供 C++、Python 两种 "
"API，您可以把 HEU 当做一个纯的 Library 来使用，也可以通过 `Secretflow "
"<https://github.com/secretflow/secretflow>`__ 编程框架将 HEU 当做一个密态计算设备使用。"
msgstr ""
"HEU is a leading PHE Library in the industry, supporting encryption and "
"decryption, plaintext-ciphertext addition and subtraction, and "
"ciphertext-plaintext multiplication calculations. It provides APIs in "
"both C++ and Python. You can use HEU as a pure library, or you can use it"
" as a secure computing device through the Secretflow "
"<https://github.com/secretflow/secretflow>__ programming framework."

#: ../../getting_started/faq.rst:41
msgid "FHE 功能的支持在路上，届时将额外支持密文乘法、密文比较等操作，敬请关注。"
msgstr ""
"Support for FHE functionality is on the way, which will additionally "
"support operations such as ciphertext multiplication and ciphertext "
"comparison. Please stay tuned."

#: ../../getting_started/faq.rst:45
msgid "请问HEU支持硬件加速的详细说明在哪？"
msgstr "Where can I find detailed information on hardware acceleration support in HEU?"


#: ../../getting_started/faq.rst:46
msgid ""
"如果您是使用者：HEU 是否使用硬件加速是由 SchemaType 参数决定的，比如 HEU 目前接入了 Intel IPCL 库，支持 "
"avx512ifma 以及 QAT 加速，在机器上已经安装相应硬件，且创建`HeKit`对象时`SchemaType`选择`IPCL`，那么 "
"IPCL 支持的硬件加速能力即可启用，关于详细的算法能力可参考 :doc:`此处<./algo_choice>`。"
msgstr ""
"If you are a user: Whether HEU utilizes hardware acceleration is "
"determined by the SchemaType parameter. For instance, HEU has integrated "
"the Intel IPCL library, which supports avx512ifma and QAT acceleration. "
"If your machine is already equipped with the corresponding hardware and "
"you select `IPCL` for the `SchemaType` when creating the `HeKit` object, "
"then the hardware acceleration capabilities supported by IPCL can be "
"enabled. For more details about the algorithm capabilities, refer to "
":doc:`here<./algo_choice>`."

#: ../../getting_started/faq.rst:47
msgid "如果您是开发者：假如您有一些硬件加速卡想让隐语兼容，可参考这个接入文档：https://www.secretflow.org.cn/docs/heu/zh_CN/development/phe_dev.html"
msgstr ""
"If you are a developer: If you have some hardware acceleration cards that"
" you would like to make compatible with HEU, you can refer to this "
"integration document: "
"https://www.secretflow.org.cn/docs/heu/zh_CN/development/phe_dev.html"

#: ../../getting_started/faq.rst:51
msgid "FPaillier 和 ZPaillier 代表了什么？"
msgstr "What do FPaillier and ZPaillier represent?"

#: ../../getting_started/faq.rst:52
msgid ""
"Q：SchemaType.FPaillier 和 SchemaType.ZPaillier分别代表什么含义"
"？提供这两个选择是否存在什么需要trade-off的东西？ `Github Issue "
"<https://github.com/secretflow/secretflow/issues/139>`__"
msgstr ""
"Q: What do SchemaType.FPaillier and SchemaType.ZPaillier represent? Are "
"there any trade-offs involved in providing these two options? `Github "
"Issue <https://github.com/secretflow/secretflow/issues/139>`__"

#: ../../getting_started/faq.rst:55
msgid ""
"A：这两个是 Paillier 算法的不同实现。在 C++ API 层面，FPaillier 与 ZPaillier "
"有一些不同，FPaillier 对标 Python-Paillier， 相当于把 Python-Paillier "
"的逻辑用C++翻译了一遍，其特点是算法层面支持浮点数加密，原理是把 scale 比特数作为明文打包在密文中，密态运算阶段算法会自行对齐、更新 "
"scale 值，其它未做过多优化。而 ZPaillier 是我们实现的一个高度优化的 Paillier 版本，只支持整数加密，性能比 "
"FPaillier 高很多。目前 Python API 并没有暴露浮点运算接口，因此 FPaillier "
"的功能不能得到全部发挥，故不推荐使用，任何情况下都应该选择 ZPaillier。"
msgstr ""
"A: These two represent different implementations of the Paillier "
"algorithm. On the C++ API level, FPaillier and ZPaillier have some "
"differences. FPaillier is aligned with Python-Paillier and is essentially"
" a C++ translation of the Python-Paillier logic. It supports encryption "
"of floating-point numbers by incorporating the scale bits into the "
"ciphertext as plaintext, and the algorithm will automatically align and "
"update the scale values during secret computation. Other optimizations "
"are not significant. ZPaillier is a highly optimized version of Paillier "
"that we developed, which only supports integer encryption and has much "
"higher performance than FPaillier. Since the Python API does not expose a"
" floating-point operation interface, FPaillier's functionality cannot be "
"fully utilized, therefore it is not recommended for use, and ZPaillier "
"should be chosen in all cases."

#: ../../getting_started/faq.rst:59
msgid "heu 是否有类似 spu runtime config 的 enable_action_trace 开关？"
msgstr ""
"Does HEU have a feature similar to the enable_action_trace switch in spu "
"runtime config?"

#: ../../getting_started/faq.rst:60
msgid "`Github Issue <https://github.com/secretflow/heu/issues/11>`__"
msgstr ""

#: ../../getting_started/faq.rst:62
msgid ""
"HEU 目前还没有引入编译器层，也没有引入 IR，因此没有 trace 开关，如果您对 HEU 感兴趣，可以参考 "
":doc:`快速入门<quick_start>`，并结合 `HEU 代码 "
"<https://github.com/secretflow/heu/blob/beta/heu/library/phe/phe.h>`__ "
"看下，整体不复杂"
msgstr ""
"HEU currently does not have a compiler layer nor an Intermediate "
"Representation (IR), hence it lacks a trace switch. If you are interested"
" in HEU, you can refer to :doc:`quick start<quick_start>` and check the "
"`HEU code "
"<https://github.com/secretflow/heu/blob/beta/heu/library/phe/phe.h>`__, "
"as it is overall not complex."

#: ../../getting_started/faq.rst:67
msgid "接口使用"
msgstr "API Usage"

#: ../../getting_started/faq.rst:71
msgid "如果想执行浮点数加解密，有什么推荐的方式么？"
msgstr ""
"Is there a recommended way to perform floating-point number encryption "
"and decryption?"

#: ../../getting_started/faq.rst:72
msgid "`Github Issue <https://github.com/secretflow/secretflow/issues/139>`__"
msgstr ""

#: ../../getting_started/faq.rst:74
msgid ""
"加密浮点数需要借助 Encoder，请参考 :doc:`快速入门<quick_start>` 和 :doc:`矩阵运算<numpy>` 中关于 "
"Encoder 的介绍。"
msgstr ""
"Encrypting floating-point numbers requires the use of an Encoder. Please "
"refer to :doc:`quick start<quick_start>` and the introduction to Encoders"
" in :doc:`matrix operations<numpy>` for more information."

#: ../../getting_started/faq.rst:78
msgid "能否提供一个HEU运算的例子"
msgstr "Can you provide an example of an HEU operation?"

#: ../../getting_started/faq.rst:79
msgid "`Github Issue <https://github.com/secretflow/secretflow/issues/54>`__"
msgstr ""

#: ../../getting_started/faq.rst:81
msgid ""
"取决于您如何使用 HEU, HEU 有两层含义，第一他是 secretflow 中的一个 device，第二他本身也是一个同态加密的 "
"library："
msgstr ""
"Depending on how you use HEU, it has two meanings: first, it is a device "
"within secretflow, and second, it is also a homomorphic encryption "
"library:"

#: ../../getting_started/faq.rst:83
msgid "当做 Library 使用，即独立于 Secretflow 单独使用 HEU，请参考 :doc:`快速入门<quick_start>`"
msgstr ""
"When used as a library, meaning used independently from Secretflow, "
"please refer to :doc:`quick start<quick_start>`."

#: ../../getting_started/faq.rst:84
msgid ""
"当做 device 使用：Secretflow 对 HEU Library 做了一些简单的封装，抽象成了 Device，Device "
"初始化主要需要指定：i) HEU 逻辑设备由哪几个参与方组成，每个参与方的角色是什么？是 evaluator 还是 sk_keeper。ii) "
"HEU 内部运行的 HE 算法和参数是什么。 iii) HEU 与其它 Device 交互所需要的信息，例如 SPU 用的 scale 是什么。 "
"HEU Device 的文档目前相对欠缺，我们后面会补充，当前有一个基于 `HEU + SPU 的 LR 实现(即 HESS-LR) "
"<https://github.com/secretflow/secretflow/blob/main/secretflow/ml/linear/hess_sgd/model.py>`__，您可以参考"
" HESS-LR 获取 HEU Device 的用法。"
msgstr ""
"When used as a device: Secretflow has simplified the HEU Library, "
"abstracting it into a Device. Device initialization mainly requires "
"specifyingi) Which participants comprise the HEU logical device, and what"
" are their roles? Are they evaluators or sk_keepers? ii) What are the HE "
"algorithms and parameters operated internally by HEU? iii) What "
"information is required for HEU to interact with other Devices, such as "
"the scale used by SPU? The documentation for the HEU Device is currently "
"lacking, which we will supplement later. There is an implementation based"
" on `HEU + SPU for LR (i.e., HESS-LR) "
"<https://github.com/secretflow/secretflow/blob/main/secretflow/ml/linear/hess_sgd/model.py>`__,"
" from which you can learn the usage of the HEU Device."
