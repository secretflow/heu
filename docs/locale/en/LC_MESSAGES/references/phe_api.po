# SOME DESCRIPTIVE TITLE.
# Copyright (C) Copyright 2022 Ant Group Co., Ltd.
# This file is distributed under the same license as the HEU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: HEU \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-07 16:58+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../references/phe_api.rst:2 dfdb98df0b1f49ddab12a9fb8920b458
msgid "API 手册"
msgstr "API Reference"

#: ../../references/phe_api.rst:4 86810b988a61450d9d31f15a7b8b5fed
msgid "请使用 ``from heu import phe`` 引入 phe 模块"
msgstr "Please use ``from heu import phe`` to import phe module"

#: ../../docstring 018bd5952cf547179ef624a8be292cd0 of phe:1
msgid "A high-performance partial homomorphic encryption library"
msgstr ""

#: ../../docstring e113f502f61f4e1b83e071277f308c06 of phe.PyCapsule.decode:1
msgid "Decode plaintext and return two cleartexts"
msgstr ""

#: ../../docstring 4e38c48bb71e45288f26cc1c3cfdac49 of phe.PyCapsule.encode:1
msgid "Batch encode two cleartexts into one plaintext"
msgstr ""

#: ../../docstring e39aea24ede34872943b1c99ec52c31e of phe.PyCapsule.decrypt:1
msgid "Decrypt ciphertext to plaintext"
msgstr ""

#: ../../docstring 99fedfb0f9884b1c98c117de2c5d60c1 of
#: phe.PyCapsule.decrypt_raw:1
msgid "Decrypt without decoding"
msgstr ""

#: ../../docstring fd6ba251b60944f79f6c857c674cc5f8 of
#: phe.PyCapsule.encryptor:1
msgid "Get encryptor"
msgstr ""

#: ../../docstring 43730d377db24ccba7a6cfe9adf5c555 of
#: phe.PyCapsule.evaluator:1
msgid "Get evaluator"
msgstr ""

#: ../../docstring 296066904741450db7b8ec578072917b of
#: phe.PyCapsule.public_key:1
msgid "Get public key"
msgstr ""

#: ../../docstring 59fe171cb57547eaab7b686ee0e4f588 of phe.PyCapsule.encrypt:1
msgid "Encrypt plaintext to ciphertext"
msgstr ""

#: ../../docstring 43dfe0a989e3439f81b407fda91ed195 of
#: phe.PyCapsule.encrypt_raw:1
msgid "Encrypt without encoding"
msgstr ""

#: ../../docstring ff77c21bd4324b7b8fc3a93b688b9400 of
#: phe.PyCapsule.encrypt_with_audit:1
msgid "Encrypt and build audit string include plaintext/random/ciphertex"
msgstr ""

#: ../../docstring 4a93c3399d994c70993b71472232718f of phe.PyCapsule.add:1
#: phe.PyCapsule.add_inplace:1 phe.PyCapsule.encode:1 phe.PyCapsule.mul:1
#: phe.PyCapsule.setup:1 phe.PyCapsule.sub:1 phe.PyCapsule.sub_inplace:1
msgid "Overloaded function."
msgstr ""

#: ../../docstring 7d4f7d4cd1b5446a8e0bf8ef507a191d of phe.PyCapsule.add:3
msgid ""
"add(self: phe.Evaluator, arg0: phe.Ciphertext, arg1: phe.Plaintext) -> "
"phe.Ciphertext"
msgstr ""

#: ../../docstring cd7c7fa5162b4b938e5529f69f25bfc1 of phe.PyCapsule.add:5
msgid ""
"add(self: phe.Evaluator, arg0: phe.Plaintext, arg1: phe.Ciphertext) -> "
"phe.Ciphertext"
msgstr ""

#: ../../docstring f97dcbead9404f38b7d3d87b916c546a of phe.PyCapsule.add:7
msgid ""
"add(self: phe.Evaluator, arg0: phe.Ciphertext, arg1: phe.Ciphertext) -> "
"phe.Ciphertext"
msgstr ""

#: ../../docstring c415f3849b5d40cd8bb0b75929b9859e of
#: phe.PyCapsule.add_inplace:3
msgid ""
"add_inplace(self: phe.Evaluator, arg0: phe.Ciphertext, arg1: "
"phe.Plaintext) -> None"
msgstr ""

#: ../../docstring 46756bdd123241b7b05ac0c8732a0dd5 of
#: phe.PyCapsule.add_inplace:5
msgid ""
"add_inplace(self: phe.Evaluator, arg0: phe.Ciphertext, arg1: "
"phe.Ciphertext) -> None"
msgstr ""

#: ../../docstring d7be8f69db554313ba6ba9634abd926b of phe.PyCapsule.mul:3
msgid ""
"mul(self: phe.Evaluator, ciphertext: phe.Ciphertext, times: int) -> "
"phe.Ciphertext"
msgstr ""

#: ../../docstring 5a09058e089844ab93df2f41fd59ce6d of phe.PyCapsule.mul:5
msgid ""
"mul(self: phe.Evaluator, ciphertext: int, times: phe.Ciphertext) -> "
"phe.Ciphertext"
msgstr ""

#: ../../docstring c80a25f64a674ae6b031476783c5b99f of phe.PyCapsule.sub:3
msgid ""
"sub(self: phe.Evaluator, arg0: phe.Ciphertext, arg1: phe.Plaintext) -> "
"phe.Ciphertext"
msgstr ""

#: ../../docstring 58a59c040b8e4300bfb55d6eaa0227a5 of phe.PyCapsule.sub:5
msgid ""
"sub(self: phe.Evaluator, arg0: phe.Plaintext, arg1: phe.Ciphertext) -> "
"phe.Ciphertext"
msgstr ""

#: ../../docstring b294600cf03f4572ba0e186e427491d8 of phe.PyCapsule.sub:7
msgid ""
"sub(self: phe.Evaluator, arg0: phe.Ciphertext, arg1: phe.Ciphertext) -> "
"phe.Ciphertext"
msgstr ""

#: ../../docstring 4f187b69caff45c7869dd2eabb2ce746 of
#: phe.PyCapsule.sub_inplace:3
msgid ""
"sub_inplace(self: phe.Evaluator, arg0: phe.Ciphertext, arg1: "
"phe.Plaintext) -> None"
msgstr ""

#: ../../docstring d92c745d83aa4565b9760e95fafa4a6e of
#: phe.PyCapsule.sub_inplace:5
msgid ""
"sub_inplace(self: phe.Evaluator, arg0: phe.Ciphertext, arg1: "
"phe.Ciphertext) -> None"
msgstr ""

#: ../../docstring ef87d37d1bd4430285b5774beb516d41 of
#: phe.PyCapsule.decryptor:1
msgid "Get decryptor"
msgstr ""

#: ../../docstring 6edd26c00bb5493d8ebc20b6d2878918 of
#: phe.PyCapsule.secret_key:1
msgid "Get secret key"
msgstr ""

#: ../../docstring 91f9fd5d2da344bc9b0edbddf1a51496 of phe.PyCapsule.decode:1
msgid "Decode plaintext to float number"
msgstr ""

#: ../../docstring d25749e7be934d6c9a0a18f0c761efda of
#: phe.PyCapsule.decode_int:1
msgid "Decode plaintext to int128 number"
msgstr ""

#: ../../docstring 21557c84296c479fba72bd13f7483838 of phe.PyCapsule.encode:3
msgid "encode(self: phe.PlainEncoder, cleartext: float) -> phe.Plaintext"
msgstr ""

#: ../../docstring 1fd3f89d16f34d33b5358c7c02eb2903 of phe.PyCapsule.encode:5
msgid "Encode a float number into plaintext"
msgstr ""

#: ../../docstring a8472a2abff8465682dd747f5109be08 of phe.PyCapsule.encode:7
msgid "encode(self: phe.PlainEncoder, cleartext: int) -> phe.Plaintext"
msgstr ""

#: ../../docstring 44268e0701d546e0be9a01d0e381e8f4 of phe.PyCapsule.encode:9
msgid "Encode an int128 number into plaintext"
msgstr ""

#: ../../docstring 63e4439bd01340dca7febda533bc3762 of
#: phe.PyCapsule.plaintext_bound:1
msgid "Get max_int, so valid plaintext range is (max_int, -max_int)"
msgstr ""

#: ../../docstring a725d1febd43424d9d1349d8fc718989 of phe.SchemaType:1
msgid "Members:"
msgstr ""

#: ../../docstring 0296b9c4609c4963a55415d332e2b0cf of phe.SchemaType:3
msgid "None"
msgstr ""

#: ../../docstring da541ccb746b4546b2b4657291528b49 of phe.SchemaType:5
msgid "ZPaillier"
msgstr ""

#: ../../docstring a2f29572d0564f3abf351688f9a7bbb0 of phe.SchemaType:7
msgid "FPaillier"
msgstr ""

#: ../../docstring 327fa1999e89491098e8aff59c76716d of phe.PyCapsule.setup:3
msgid ""
"setup(schema_type: phe.SchemaType = <SchemaType.ZPaillier: 1>, key_size: "
"int = 2048) -> phe.HeKit"
msgstr ""

#: ../../docstring 4213581f413c471c8a1c793dacd938bb of phe.PyCapsule.setup:5
msgid "Setup phe environment by schema type and key size"
msgstr ""

#: ../../docstring fcb78930776143d0abc521fcda061946 of phe.PyCapsule.setup:7
msgid ""
"setup(schema_string: str = 'z-paillier', key_size: int = 2048) -> "
"phe.HeKit"
msgstr ""

#: ../../docstring 41bf9555758b4c0f9ee9dbb1ff8bebad of phe.PyCapsule.setup:9
msgid "Setup phe environment by schema string and key size"
msgstr ""

#: ../../docstring a97fa5645ddc4b58aec64a2460f4dfb1 of phe.PyCapsule.setup:11
msgid "setup(public_key: phe.PublicKey) -> phe.DestinationHeKit"
msgstr ""

#: ../../docstring c29b8e1b94af4b57b2c5e87940fcda89 of phe.PyCapsule.setup:13
msgid "Setup phe environment by an already generated public key"
msgstr ""
