# SOME DESCRIPTIVE TITLE.
# Copyright (C) Copyright 2022 Ant Group Co., Ltd.
# This file is distributed under the same license as the HEU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: HEU \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-25 10:58+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../references/phe_api.rst:2
msgid "PHE 模块"
msgstr "PHE Module"

#: ../../references/phe_api.rst:4
msgid "请使用 ``from heu import phe`` 引入 phe 模块"
msgstr "Please use ``from heu import phe`` to import phe module"

#: ../../docstring heu.phe:1 of
msgid "A high-performance partial homomorphic encryption library"
msgstr ""

#: ../../docstring heu.phe.BatchFloatEncoder:1 of
msgid "BatchFloatEncoder can encode two floating number into one plaintext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.decode:1 of
msgid "Decode plaintext and return two cleartexts"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encode:1 of
msgid "Batch encode two cleartexts into one plaintext"
msgstr ""

#: ../../docstring heu.phe.BatchFloatEncoderParams:1 of
msgid "Store parameters for BatchFloatEncoder"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.instance:1 of
msgid "Create BatchFloatEncoder instance"
msgstr ""

#: ../../docstring heu.phe.BatchIntegerEncoder:1 of
msgid "BatchIntegerEncoder can encode two integers into one plaintext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encode:1 of
msgid "Encode two int64 cleartexts into one plaintext"
msgstr ""

#: ../../docstring heu.phe.BatchIntegerEncoderParams:1 of
msgid "Store parameters for BatchIntegerEncoder"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.instance:1 of
msgid "Create BatchIntegerEncoder instance"
msgstr ""

#: ../../docstring heu.phe.BigintDecoder:1 of
msgid "BigintDecoder is used to decode plaintext into Python integers."
msgstr ""

#: ../../docstring heu.phe.BigintDecoder:3 of
msgid ""
"BigintEncoder is the most commonly used Encoder type. Creating an "
"BigintEncoder instance depends on schema info, however, schema info is "
"only needed for encoding, that is, decoding does not depend on schema. To"
" make the BigintEncoder implicitly usable when decoding, we split out the"
" decoding part called BigintDecoder, which does not rely on any "
"initialization parameters and can create instances anywhere, making it "
"easier to use"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.decode:1 of
msgid "Decode plaintext to python int number"
msgstr ""

#: ../../docstring heu.phe.BigintEncoder:1 heu.phe.FloatEncoder:1
#: heu.phe.IntegerEncoder:1 of
msgid "Encode cleartext into plaintext."
msgstr ""

#: ../../docstring heu.phe.BigintEncoder:3 of
msgid "BigintEncoder supports arbitrary precision integers"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encode:1 of
msgid "Encode python int number into plaintext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.instance:1 of
msgid "Create BigintEncoder instance"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.decrypt:1 of
msgid "Decrypt ciphertext to plaintext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.decrypt_in_range:1 of
msgid ""
"Decrypt ciphertext and make sure plaintext is in range (-2^range_bits, "
"2^range_bits). Range checking is used to block OU plaintext overflow "
"attack, see HEU documentation for details. throws an exception if "
"plaintext is out of range."
msgstr ""

#: ../../docstring heu.phe.PyCapsule.decrypt_raw:1 of
msgid "Decrypt and decoding. The decoding behavior is similar to BigintEncoder"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encryptor:1 of
msgid "Get encryptor"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.evaluator:1 of
msgid "Get evaluator"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encrypt:1 of
msgid "Encrypt plaintext to ciphertext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encrypt_raw:1 of
msgid ""
"Encode and encrypt an integer cleartext. The encoding behavior is similar"
" to BigintEncoder"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encrypt_with_audit:1 of
msgid "Encrypt and build audit string including plaintext/random/ciphertext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.add:1 heu.phe.PyCapsule.add_inplace:1
#: heu.phe.PyCapsule.encode:1 heu.phe.PyCapsule.mul:1 heu.phe.PyCapsule.setup:1
#: heu.phe.PyCapsule.sub:1 heu.phe.PyCapsule.sub_inplace:1 of
msgid "Overloaded function."
msgstr ""

#: ../../docstring heu.phe.PyCapsule.add:3 of
msgid ""
"add(self: heu.phe.Evaluator, arg0: heu.phe.Ciphertext, arg1: "
"heu.phe.Plaintext) -> heu.phe.Ciphertext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.add:5 of
msgid ""
"add(self: heu.phe.Evaluator, arg0: heu.phe.Plaintext, arg1: "
"heu.phe.Ciphertext) -> heu.phe.Ciphertext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.add:7 of
msgid ""
"add(self: heu.phe.Evaluator, arg0: heu.phe.Ciphertext, arg1: "
"heu.phe.Ciphertext) -> heu.phe.Ciphertext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.add_inplace:3 of
msgid ""
"add_inplace(self: heu.phe.Evaluator, arg0: heu.phe.Ciphertext, arg1: "
"heu.phe.Plaintext) -> None"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.add_inplace:5 of
msgid ""
"add_inplace(self: heu.phe.Evaluator, arg0: heu.phe.Ciphertext, arg1: "
"heu.phe.Ciphertext) -> None"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.mul:3 of
msgid ""
"mul(self: heu.phe.Evaluator, ciphertext: heu.phe.Ciphertext, times: int) "
"-> heu.phe.Ciphertext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.mul:5 of
msgid ""
"mul(self: heu.phe.Evaluator, ciphertext: int, times: heu.phe.Ciphertext) "
"-> heu.phe.Ciphertext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.sub:3 of
msgid ""
"sub(self: heu.phe.Evaluator, arg0: heu.phe.Ciphertext, arg1: "
"heu.phe.Plaintext) -> heu.phe.Ciphertext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.sub:5 of
msgid ""
"sub(self: heu.phe.Evaluator, arg0: heu.phe.Plaintext, arg1: "
"heu.phe.Ciphertext) -> heu.phe.Ciphertext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.sub:7 of
msgid ""
"sub(self: heu.phe.Evaluator, arg0: heu.phe.Ciphertext, arg1: "
"heu.phe.Ciphertext) -> heu.phe.Ciphertext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.sub_inplace:3 of
msgid ""
"sub_inplace(self: heu.phe.Evaluator, arg0: heu.phe.Ciphertext, arg1: "
"heu.phe.Plaintext) -> None"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.sub_inplace:5 of
msgid ""
"sub_inplace(self: heu.phe.Evaluator, arg0: heu.phe.Ciphertext, arg1: "
"heu.phe.Ciphertext) -> None"
msgstr ""

#: ../../docstring heu.phe.FloatEncoder:3 of
msgid "The cleartext can be a floating point number"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.decode:1 of
msgid "Decode plaintext to float number"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encode:3 of
msgid "encode(self: heu.phe.FloatEncoder, cleartext: float) -> heu.phe.Plaintext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encode:5 of
msgid "Encode a float number into plaintext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encode:7 of
msgid "encode(self: heu.phe.FloatEncoder, cleartext: int) -> heu.phe.Plaintext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encode:5 heu.phe.PyCapsule.encode:9 of
msgid "Encode an int128 number into plaintext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.instance:1 of
msgid "Create FloatEncoder instance"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.decryptor:1 of
msgid "Get decryptor"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.batch_float_encoder:1 of
msgid ""
"Get an instance of BatchIntegerEncoder, equal to "
"`phe.BatchFloatEncoder(schema, scale, padding_size)`"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.batch_integer_encoder:1 of
msgid ""
"Get an instance of BatchIntegerEncoder, equal to "
"`phe.BatchIntegerEncoder(schema, scale, padding_size)`"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.bigint_encoder:1 of
msgid "Get an instance of BigintEncoder, equal to `phe.BigintEncoder(schema)`"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.float_encoder:1 of
msgid ""
"Get an instance of FloatEncoder, equal to `phe.FloatEncoder(schema, "
"scale)`"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.get_schema:1 of
msgid "Get schema type"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.integer_encoder:1 of
msgid ""
"Get an instance of IntegerEncoder, equal to `phe.IntegerEncoder(schema, "
"scale)`"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.plaintext:1 of
msgid ""
"Create a plaintext from int without bit size limit, equal to "
"heu.phe.Plaintext(schema, int_num)"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.public_key:1 of
msgid "Get public key"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.secret_key:1 of
msgid "Get secret key"
msgstr ""

#: ../../docstring heu.phe.IntegerEncoder:3 of
msgid ""
"The cleartext must be an integer. If the cleartext is a floating-point "
"number, the fractional part will be discarded."
msgstr ""

#: ../../docstring heu.phe.PyCapsule.decode:1 of
msgid "Decode plaintext to int128 number"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encode:3 of
msgid "encode(self: heu.phe.IntegerEncoder, cleartext: int) -> heu.phe.Plaintext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encode:7 of
msgid "encode(self: heu.phe.IntegerEncoder, arg0: float) -> heu.phe.Plaintext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encode:9 of
msgid ""
"Encode the integer part of a floating point number. (discarding the "
"fractional part)"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.instance:1 of
msgid "Create IntegerEncoder instance"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.bit_count:1 of
msgid "Bit size of this plaintext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.is_compatible:1 of
msgid "Is this plaintext compatible with schema type 'x'"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.to_bytes:1 of
msgid "Return an array of bytes representing an integer."
msgstr ""

#: ../../docstring heu.phe.PyCapsule.to_bytes:3 of
msgid ""
"The byteorder argument determines the byte order used to represent the "
"integer. If byteorder is \"big\", the most significant byte is at the "
"beginning of the byte array. If byteorder is \"little\", the most "
"significant byte is at the end of the byte array. To request the native "
"byte order of the host system, use sys.byteorder as the byte order value."
msgstr ""

#: ../../docstring heu.phe.PyCapsule.load_from:1 of
msgid "deserialize matrix from bytes"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.plaintext_bound:1 of
msgid "Get max_int, so valid plaintext range is [max_int_, -max_int_]"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.serialize:1 of
msgid "serialize public key to bytes"
msgstr ""

#: ../../docstring heu.phe.SchemaType:1 of
msgid "Members:"
msgstr ""

#: ../../docstring heu.phe.SchemaType:3 of
msgid "Mock"
msgstr ""

#: ../../docstring heu.phe.SchemaType:5 of
msgid "OU"
msgstr ""

#: ../../docstring heu.phe.SchemaType:7 of
msgid "IPCL"
msgstr ""

#: ../../docstring heu.phe.SchemaType:9 of
msgid "ZPaillier"
msgstr ""

#: ../../docstring heu.phe.SchemaType:11 of
msgid "FPaillier"
msgstr ""

#: ../../docstring heu.phe.SchemaType:13 of
msgid "IcPaillier"
msgstr ""

#: ../../docstring heu.phe.SchemaType:15 of
msgid "ElGamal"
msgstr ""

#: ../../docstring heu.phe.SchemaType:17 of
msgid "DGK"
msgstr ""

#: ../../docstring heu.phe.SchemaType:19 of
msgid "DJ"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.parse_schema_type:1 of
msgid "Parse schema string. (string -> SchemaType)"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.setup:3 of
msgid "setup(schema_type: heu.phe.SchemaType, key_size: int) -> heu.phe.HeKit"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.setup:5 of
msgid "Setup phe environment by schema type and key size"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.setup:7 of
msgid "setup(schema_string: str, key_size: int) -> heu.phe.HeKit"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.setup:9 of
msgid "Setup phe environment by schema string and key size"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.setup:11 of
msgid ""
"setup(schema_type: heu.phe.SchemaType = <SchemaType.ZPaillier: 3>) -> "
"heu.phe.HeKit"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.setup:13 of
msgid "Setup phe environment by schema type"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.setup:15 of
msgid "setup(schema_string: str = 'z-paillier') -> heu.phe.HeKit"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.setup:17 of
msgid "Setup phe environment by schema string"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.setup:19 of
msgid "setup(public_key: heu.phe.PublicKey) -> heu.phe.DestinationHeKit"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.setup:21 of
msgid "Setup phe environment by an already generated public key"
msgstr ""
