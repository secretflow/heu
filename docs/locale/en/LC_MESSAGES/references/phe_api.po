# SOME DESCRIPTIVE TITLE.
# Copyright (C) Copyright 2022 Ant Group Co., Ltd.
# This file is distributed under the same license as the HEU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: HEU \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-25 16:01+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../references/phe_api.rst:2
msgid "PHE 模块"
msgstr "PHE Module"

#: ../../references/phe_api.rst:4
msgid "请使用 ``from heu import phe`` 引入 phe 模块"
msgstr "Please use ``from heu import phe`` to import phe module"

#: ../../docstring heu.phe:1 of
msgid "A high-performance partial homomorphic encryption library"
msgstr ""

#: ../../docstring heu.phe.BatchEncoder:1 of
msgid "Encode two cleartexts into one plaintext."
msgstr ""

#: ../../docstring heu.phe.BatchEncoder:3 of
msgid "Cleartexts must be integers and cannot exceed 64bit."
msgstr ""

#: ../../docstring heu.phe.PyCapsule.decode:1 of
msgid "Decode plaintext and return two cleartexts"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encode:1 of
msgid "Batch encode two cleartexts into one plaintext"
msgstr ""

#: ../../docstring heu.phe.BigintEncoder:1 heu.phe.FloatEncoder:1
#: heu.phe.IntegerEncoder:1 of
msgid "Encode cleartext into plaintext."
msgstr ""

#: ../../docstring heu.phe.BigintEncoder:3 of
msgid "PyBigintEncoder supports arbitrary precision integers"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.decode:1 of
msgid "Decode plaintext to python int number"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encode:1 of
msgid "Encode python int number into plaintext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.decrypt:1 of
msgid "Decrypt ciphertext to plaintext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.decrypt_raw:1 of
msgid "Decrypt and decoding. The decoding behavior is similar to BigintEncoder"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encryptor:1 of
msgid "Get encryptor"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.evaluator:1 of
msgid "Get evaluator"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.public_key:1 of
msgid "Get public key"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encrypt:1 of
msgid "Encrypt plaintext to ciphertext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encrypt_raw:1 of
msgid ""
"Encode and encrypt an integer cleartext. The encoding behavior is similar"
" to BigintEncoder"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encrypt_with_audit:1 of
msgid "Encrypt and build audit string including plaintext/random/ciphertext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.add:1 heu.phe.PyCapsule.add_inplace:1
#: heu.phe.PyCapsule.encode:1 heu.phe.PyCapsule.mul:1 heu.phe.PyCapsule.setup:1
#: heu.phe.PyCapsule.sub:1 heu.phe.PyCapsule.sub_inplace:1 of
msgid "Overloaded function."
msgstr ""

#: ../../docstring heu.phe.PyCapsule.add:3 of
msgid ""
"add(self: heu.phe.Evaluator, arg0: heu.phe.Ciphertext, arg1: "
"heu.phe.Plaintext) -> heu.phe.Ciphertext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.add:5 of
msgid ""
"add(self: heu.phe.Evaluator, arg0: heu.phe.Plaintext, arg1: "
"heu.phe.Ciphertext) -> heu.phe.Ciphertext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.add:7 of
msgid ""
"add(self: heu.phe.Evaluator, arg0: heu.phe.Ciphertext, arg1: "
"heu.phe.Ciphertext) -> heu.phe.Ciphertext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.add_inplace:3 of
msgid ""
"add_inplace(self: heu.phe.Evaluator, arg0: heu.phe.Ciphertext, arg1: "
"heu.phe.Plaintext) -> None"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.add_inplace:5 of
msgid ""
"add_inplace(self: heu.phe.Evaluator, arg0: heu.phe.Ciphertext, arg1: "
"heu.phe.Ciphertext) -> None"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.mul:3 of
msgid ""
"mul(self: heu.phe.Evaluator, ciphertext: heu.phe.Ciphertext, times: int) "
"-> heu.phe.Ciphertext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.mul:5 of
msgid ""
"mul(self: heu.phe.Evaluator, ciphertext: int, times: heu.phe.Ciphertext) "
"-> heu.phe.Ciphertext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.sub:3 of
msgid ""
"sub(self: heu.phe.Evaluator, arg0: heu.phe.Ciphertext, arg1: "
"heu.phe.Plaintext) -> heu.phe.Ciphertext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.sub:5 of
msgid ""
"sub(self: heu.phe.Evaluator, arg0: heu.phe.Plaintext, arg1: "
"heu.phe.Ciphertext) -> heu.phe.Ciphertext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.sub:7 of
msgid ""
"sub(self: heu.phe.Evaluator, arg0: heu.phe.Ciphertext, arg1: "
"heu.phe.Ciphertext) -> heu.phe.Ciphertext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.sub_inplace:3 of
msgid ""
"sub_inplace(self: heu.phe.Evaluator, arg0: heu.phe.Ciphertext, arg1: "
"heu.phe.Plaintext) -> None"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.sub_inplace:5 of
msgid ""
"sub_inplace(self: heu.phe.Evaluator, arg0: heu.phe.Ciphertext, arg1: "
"heu.phe.Ciphertext) -> None"
msgstr ""

#: ../../docstring heu.phe.FloatEncoder:3 of
msgid "The cleartext can be a floating point number"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.decode:1 of
msgid "Decode plaintext to float number"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encode:3 of
msgid "encode(self: heu.phe.FloatEncoder, cleartext: float) -> heu.phe.Plaintext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encode:5 of
msgid "Encode a float number into plaintext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encode:7 of
msgid "encode(self: heu.phe.FloatEncoder, cleartext: int) -> heu.phe.Plaintext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encode:5 heu.phe.PyCapsule.encode:9 of
msgid "Encode an int128 number into plaintext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.decryptor:1 of
msgid "Get decryptor"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.secret_key:1 of
msgid "Get secret key"
msgstr ""

#: ../../docstring heu.phe.IntegerEncoder:3 of
msgid ""
"The cleartext must be an integer. If the cleartext is a floating-point "
"number, the fractional part will be discarded."
msgstr ""

#: ../../docstring heu.phe.PyCapsule.decode:1 of
msgid "Decode plaintext to int128 number"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encode:3 of
msgid "encode(self: heu.phe.IntegerEncoder, cleartext: int) -> heu.phe.Plaintext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encode:7 of
msgid "encode(self: heu.phe.IntegerEncoder, arg0: float) -> heu.phe.Plaintext"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.encode:9 of
msgid ""
"Encode the integer part of a floating point number. (discarding the "
"fractional part)"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.to_bytes:1 of
msgid "Return an array of bytes representing an integer."
msgstr ""

#: ../../docstring heu.phe.PyCapsule.to_bytes:3 of
msgid ""
"The byteorder argument determines the byte order used to represent the "
"integer. If byteorder is \"big\", the most significant byte is at the "
"beginning of the byte array. If byteorder is \"little\", the most "
"significant byte is at the end of the byte array. To request the native "
"byte order of the host system, use sys.byteorder as the byte order value."
msgstr ""

#: ../../docstring heu.phe.PyCapsule.plaintext_bound:1 of
msgid "Get max_int, so valid plaintext range is (max_int, -max_int)"
msgstr ""

#: ../../docstring heu.phe.SchemaType:1 of
msgid "Members:"
msgstr ""

#: ../../docstring heu.phe.SchemaType:3 of
msgid "Mock : No encryption, only for debugging"
msgstr ""

#: ../../docstring heu.phe.SchemaType:5 of
msgid "ZPaillier"
msgstr ""

#: ../../docstring heu.phe.SchemaType:7 of
msgid "FPaillier"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.setup:3 of
msgid ""
"setup(schema_type: heu.phe.SchemaType = <SchemaType.ZPaillier: 1>, "
"key_size: int = 2048) -> heu.phe.HeKit"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.setup:5 of
msgid "Setup phe environment by schema type and key size"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.setup:7 of
msgid ""
"setup(schema_string: str = 'z-paillier', key_size: int = 2048) -> "
"heu.phe.HeKit"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.setup:9 of
msgid "Setup phe environment by schema string and key size"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.setup:11 of
msgid "setup(public_key: heu.phe.PublicKey) -> heu.phe.DestinationHeKit"
msgstr ""

#: ../../docstring heu.phe.PyCapsule.setup:13 of
msgid "Setup phe environment by an already generated public key"
msgstr ""

