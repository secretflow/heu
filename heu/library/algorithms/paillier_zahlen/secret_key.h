// Copyright 2022 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include "heu/library/algorithms/util/he_object.h"
#include "heu/library/algorithms/util/mp_int.h"

namespace heu::lib::algorithms::paillier_z {

class SecretKey : public HeObject<SecretKey> {
 public:
  MPInt lambda_;  // lambda = lcm(p−1, q−1)
  MPInt mu_;      // μ
  MPInt p_;       // p
  MPInt q_;       // q
  // Node: The following paramters are generated by p & q
  MPInt p_square_;                   // p^2
  MPInt q_square_;                   // q^2
  MPInt n_square_;                   // n_ * n_
  MPInt q_square_inv_mul_q_square_;  // (q^2)^{-1} mod p^2 * q^2
  MPInt phi_p_square_;               // p(p-1)
  MPInt phi_q_square_;               // q(q-1)

  void Init();
  // base^exp mod n^2, n = p * q
  MPInt PowModNSquareCrt(const MPInt &base, const MPInt &exp) const;

  bool operator==(const SecretKey &other) const {
    return p_ == other.p_ && q_ == other.q_ && lambda_ == other.lambda_ &&
           mu_ == other.mu_;
  }

  bool operator!=(const SecretKey &other) const {
    return !this->operator==(other);
  }

  [[nodiscard]] std::string ToString() const override;
};

}  // namespace heu::lib::algorithms::paillier_z

// clang-format off
namespace msgpack {
MSGPACK_API_VERSION_NAMESPACE(MSGPACK_DEFAULT_API_NS) {
namespace adaptor {

template<>
struct pack<heu::lib::algorithms::paillier_z::SecretKey> {
  template<typename Stream>
  packer<Stream> &operator()(msgpack::packer<Stream> &o,
      const heu::lib::algorithms::paillier_z::SecretKey &sk) const {
    // packing member variables as an array.
    o.pack_array(4);
    o.pack(sk.lambda_);
    o.pack(sk.mu_);
    o.pack(sk.p_);
    o.pack(sk.q_);
    return o;
  }
};

template<>
struct convert<heu::lib::algorithms::paillier_z::SecretKey> {
  msgpack::object const &operator()(const msgpack::object &object,
      heu::lib::algorithms::paillier_z::SecretKey &sk) const {
    if (object.type != msgpack::type::ARRAY) { throw msgpack::type_error(); }
    if (object.via.array.size != 4) { throw msgpack::type_error(); }

    // The order here corresponds to the packer above
    sk.lambda_ = object.via.array.ptr[0].as<heu::lib::algorithms::MPInt>();
    sk.mu_ = object.via.array.ptr[1].as<heu::lib::algorithms::MPInt>();
    sk.p_ = object.via.array.ptr[2].as<heu::lib::algorithms::MPInt>();
    sk.q_ = object.via.array.ptr[3].as<heu::lib::algorithms::MPInt>();
    sk.Init();
    return object;
  }
};

}  // namespace adaptor
}  // namespace msgpack
}  // namespace msgpack

// clang-format on
