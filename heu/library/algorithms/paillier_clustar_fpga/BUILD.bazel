load("@yacl//bazel:yacl.bzl", "yacl_cc_binary", "yacl_cc_library", "yacl_cc_test")

package(default_visibility = ["//visibility:public"])

config_setting(
    name = "use_clustar_fpga",
    values = {
        "define": "enable_clustar_fpga=true",
    },
)

yacl_cc_library(
    name = "paillier_clustar_fpga_defs",
    hdrs = ["clustar_fpga.h"],
    deps = [":paillier_clustar_fpga"],
)

yacl_cc_library(
    name = "paillier_clustar_fpga",
    srcs = select({
        ":use_clustar_fpga": [
            "plaintext.cc",
            "ciphertext.cc",
            "public_key.cc",
            "secret_key.cc",
            "key_generator.cc",
            "vector_encryptor.cc",
            "vector_decryptor.cc",
            "vector_evaluator.cc",
            "utils/pub_key_helper.cc",
            "utils/secr_key_helper.cc",
            "utils/facility.cc",
        ],
        "//conditions:default": [],
    }),
    hdrs = select({
        ":use_clustar_fpga": [
            "plaintext.h",
            "ciphertext.h",
            "public_key.h",
            "secret_key.h",
            "key_generator.h",
            "vector_encryptor.h",
            "vector_decryptor.h",
            "vector_evaluator.h",
            "utils/pub_key_helper.h",
            "utils/secr_key_helper.h",
            "utils/facility.h",
            "clustar_fpga.h",
        ],
        "//conditions:default": [],
    }),
    defines = select({
        ":use_clustar_fpga": ["APPLY_CLUSTAR_FPGA"],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
    deps = select({
        ":use_clustar_fpga": [
            "//heu/library/algorithms/util:mp_int",
            "//heu/library/algorithms/util",
            "//heu/library/algorithms/paillier_clustar_fpga/fpga_engine/paillier_operators:fpga_operators",
            "@yacl//yacl/base:byte_container_view",
            "@com_github_msgpack_msgpack//:msgpack",
        ],
        "//conditions:default": [],
    }),
)

yacl_cc_test(
    name = "plaintext_test",
    srcs = select({
        ":use_clustar_fpga": ["plaintext_test.cc"],
        "//conditions:default": [],
    }),
    defines = select({
        ":use_clustar_fpga": ["APPLY_CLUSTAR_FPGA"],
        "//conditions:default": [],
    }),
    deps = select({
        ":use_clustar_fpga": [":paillier_clustar_fpga"],
        "//conditions:default": [],
    }),
)

yacl_cc_test(
    name = "key_gen_test",
    srcs = select({
        ":use_clustar_fpga": ["key_gen_test.cc"],
        "//conditions:default": [],
    }),
    defines = select({
        ":use_clustar_fpga": ["APPLY_CLUSTAR_FPGA"],
        "//conditions:default": [],
    }),
    deps = select({
        ":use_clustar_fpga": [":paillier_clustar_fpga"],
        "//conditions:default": [],
    }),
)

yacl_cc_test(
    name = "ciphertext_test",
    srcs = select({
        ":use_clustar_fpga": ["ciphertext_test.cc"],
        "//conditions:default": [],
    }),
    defines = select({
        ":use_clustar_fpga": ["APPLY_CLUSTAR_FPGA"],
        "//conditions:default": [],
    }),
    deps = select({
        ":use_clustar_fpga": [":paillier_clustar_fpga"],
        "//conditions:default": [],
    }),
)

yacl_cc_test(
    name = "enc_dec_test",
    srcs = select({
        ":use_clustar_fpga": ["enc_dec_test.cc"],
        "//conditions:default": [],
    }),
    defines = select({
        ":use_clustar_fpga": ["APPLY_CLUSTAR_FPGA"],
        "//conditions:default": [],
    }),
    deps = select({
        ":use_clustar_fpga": [":paillier_clustar_fpga"],
        "//conditions:default": [],
    }),
)

yacl_cc_test(
    name = "evaluator_test",
    srcs = select({
        ":use_clustar_fpga": ["evaluator_test.cc"],
        "//conditions:default": [],
    }),
    defines = select({
        ":use_clustar_fpga": ["APPLY_CLUSTAR_FPGA"],
        "//conditions:default": [],
    }),
    deps = select({
        ":use_clustar_fpga": [":paillier_clustar_fpga"],
        "//conditions:default": [],
    }),
)
